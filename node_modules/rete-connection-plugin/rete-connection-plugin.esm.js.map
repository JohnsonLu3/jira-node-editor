{"version":3,"file":"rete-connection-plugin.esm.js","sources":["src/pseudoconnection.ts","src/utils.ts","src/flow/base.ts","src/flow/utils.ts","src/flow/builtin/bidirect.ts","src/flow/builtin/classic/sync-connections.ts","src/flow/builtin/classic/index.ts","src/presets/classic.ts","src/presets/index.ts","src/index.ts"],"sourcesContent":["import { getUID } from 'rete'\nimport { BaseArea, BaseAreaPlugin } from 'rete-area-plugin'\n\nimport { ClassicScheme, Position, SocketData } from './types'\n\n/**\n * Create pseudoconnection. Used to trigger rendering of connection that is being created by user.\n * Has additional `isPseudo` property in payload.\n * @param extra Extra payload to add to connection\n */\nexport function createPseudoconnection<Schemes extends ClassicScheme, K>(extra?: Partial<Schemes['Connection']>) {\n  let element: HTMLElement | null = null\n  let id: string | null = null\n\n  function unmount(areaPlugin: BaseAreaPlugin<Schemes, BaseArea<Schemes> | K>) {\n    if (id) {\n      areaPlugin.removeConnectionView(id)\n    }\n    element = null\n    id = null\n  }\n  function mount(areaPlugin: BaseAreaPlugin<Schemes, BaseArea<Schemes> | K>) {\n    unmount(areaPlugin)\n    id = `pseudo_${getUID()}`\n  }\n\n  return {\n    isMounted() {\n      return Boolean(id)\n    },\n    mount,\n    // eslint-disable-next-line complexity\n    render(areaPlugin: BaseAreaPlugin<Schemes, BaseArea<Schemes> | K>, { x, y }: Position, data: SocketData) {\n      const isOutput = data.side === 'output'\n      const pointer = { x: x + (isOutput ? -3 : 3), y } // fix hover of underlying elements\n\n      if (!id) throw new Error('pseudo connection id wasn\\'t generated')\n\n      const payload = isOutput ? {\n        id,\n        source: data.nodeId,\n        sourceOutput: data.key,\n        target: '',\n        targetInput: '',\n        ...(extra || {})\n      } : {\n        id,\n        target: data.nodeId,\n        targetInput: data.key,\n        source: '',\n        sourceOutput: '',\n        ...(extra || {})\n      }\n\n      if (!element) {\n        const view = areaPlugin.addConnectionView(payload)\n\n        element = view.element\n      }\n\n      if (!element) return\n\n      areaPlugin.emit({\n        type: 'render', data: {\n          element,\n          type: 'connection',\n          payload,\n          ...(isOutput ? { end: pointer } : { start: pointer })\n        }\n      })\n    },\n    unmount\n  }\n}\n","import { SocketData } from './types'\n/**\n * @param elements list of Element returned by document.elementsFromPoint\n */\nexport function findSocket(socketsCache: WeakMap<Element, SocketData>, elements: Element[]) {\n  for (const element of elements) {\n    const found = socketsCache.get(element)\n\n    if (found) {\n      return found\n    }\n  }\n}\n\n/**\n * Alternative to document.elementsFromPoint that traverses shadow roots\n * @param x x coordinate\n * @param y y coordinate\n * @param root root element to search in\n */\nexport function elementsFromPoint(x: number, y: number, root: ShadowRoot | Document = document) {\n  const elements = root.elementsFromPoint(x, y)\n  const shadowRoot = elements[0]?.shadowRoot\n\n  if (shadowRoot && shadowRoot !== root) {\n    elements.unshift(...elementsFromPoint(x, y, shadowRoot))\n  }\n\n  return elements\n}\n","import { BaseSchemes, NodeEditor, Scope } from 'rete'\n\nimport { Connection, SocketData } from '../types'\n\nexport type Context<Schemes extends BaseSchemes, K extends any[]> = {\n    editor: NodeEditor<Schemes>\n    scope: Scope<Connection, K>\n    socketsCache: Map<Element, SocketData>\n}\nexport type EventType = 'up' | 'down'\nexport type PickParams = { socket: SocketData, event: EventType }\n\nexport abstract class Flow<Schemes extends BaseSchemes, K extends any[]> {\n    public abstract pick(params: PickParams, context: Context<Schemes, K>): Promise<void>\n    public abstract getPickedSocket(): SocketData | undefined\n    public abstract drop(context: Context<Schemes, K>): void\n}\n","import { getUID } from 'rete'\n\nimport { ClassicScheme, SocketData } from '../types'\nimport { Context, PickParams } from './base'\n\nexport interface StateContext<Schemes extends ClassicScheme, K extends any[]> {\n  currentState: State<Schemes, K>\n  switchTo(state: State<Schemes, K>): void\n}\n\nexport abstract class State<Schemes extends ClassicScheme, K extends any[]> {\n  context!: StateContext<Schemes, K>\n  initial: SocketData | undefined\n\n  setContext(context: StateContext<Schemes, K>) {\n    this.context = context\n  }\n\n  abstract pick(params: PickParams, context: Context<Schemes, K>): Promise<void>\n  abstract drop(context: Context<Schemes, K>): void\n}\n\nexport function getSourceTarget(initial: SocketData, socket: SocketData) {\n  const forward = initial.side === 'output' && socket.side === 'input'\n  const backward = initial.side === 'input' && socket.side === 'output'\n  const [source, target] = forward\n    ? [initial, socket]\n    : (backward ? [socket, initial] : [])\n\n  if (source && target) return [source, target]\n}\n\nexport function canMakeConnection(initial: SocketData, socket: SocketData) {\n  return Boolean(getSourceTarget(initial, socket))\n}\n\nexport function makeConnection<Schemes extends ClassicScheme, K extends any[]>(initial: SocketData, socket: SocketData, context: Context<Schemes, K>) {\n  const [source, target] = getSourceTarget(initial, socket) || [null, null]\n\n  if (source && target) {\n    context.editor.addConnection({\n      id: getUID(),\n      source: source.nodeId,\n      sourceOutput: source.key,\n      target: target.nodeId,\n      targetInput: target.key\n    })\n    return true\n  }\n}\n","import { ClassicScheme, SocketData } from '../../types'\nimport { Context, Flow, PickParams } from '../base'\nimport { makeConnection as defaultMakeConnection, State, StateContext } from '../utils'\n\n/**\n * Bidirect flow params\n */\nexport type BidirectParams<Schemes extends ClassicScheme> = {\n  /** If true, user can pick a pseudo-connection by clicking on socket, not only by pointerdown */\n  pickByClick: boolean\n  /** Custom function to make connection */\n  makeConnection: <K extends any[]>(from: SocketData, to: SocketData, context: Context<Schemes, K>) => boolean | undefined\n}\n\nclass Picked<Schemes extends ClassicScheme, K extends any[]> extends State<Schemes, K> {\n  constructor(public initial: SocketData, private params: BidirectParams<Schemes>) {\n    super()\n  }\n\n  async pick({ socket }: PickParams, context: Context<Schemes, K>): Promise<void> {\n    if (this.params.makeConnection(this.initial, socket, context)) {\n      this.drop(context, socket, true)\n    } else if (!this.params.pickByClick) {\n      this.drop(context, socket)\n    }\n  }\n\n  drop(context: Context<ClassicScheme, K>, socket: SocketData | null = null, created = false): void {\n    if (this.initial) {\n      context.scope.emit({ type: 'connectiondrop', data: { initial: this.initial, socket, created } })\n    }\n    this.context.switchTo(new Idle<Schemes, K>(this.params))\n  }\n}\n\nclass Idle<Schemes extends ClassicScheme, K extends any[]> extends State<Schemes, K> {\n  constructor(private params: BidirectParams<Schemes>) {\n    super()\n  }\n\n  async pick({ socket, event }: PickParams, context: Context<Schemes, K>): Promise<void> {\n    if (event === 'down') {\n      if (await context.scope.emit({ type: 'connectionpick', data: { socket } })) {\n        this.context.switchTo(new Picked(socket, this.params))\n      } else {\n        this.drop(context)\n      }\n    }\n  }\n\n  drop(context: Context<Schemes, K>, socket: SocketData | null = null, created = false): void {\n    if (this.initial) {\n      context.scope.emit({ type: 'connectiondrop', data: { initial: this.initial, socket, created } })\n    }\n    delete this.initial\n  }\n}\n\n/**\n * Bidirect flow. User can pick a socket and connect it by releasing mouse button.\n * More simple than classic flow, but less functional (can't remove connection by clicking on input socket).\n */\nexport class BidirectFlow<Schemes extends ClassicScheme, K extends any[]> implements StateContext<Schemes, K>, Flow<Schemes, K> {\n  currentState!: State<Schemes, K>\n\n  constructor(params?: Partial<BidirectParams<Schemes>>) {\n    const pickByClick = Boolean(params?.pickByClick)\n    const makeConnection = params?.makeConnection || defaultMakeConnection\n\n    this.switchTo(new Idle({ pickByClick, makeConnection }))\n  }\n\n  public async pick(params: PickParams, context: Context<Schemes, K>) {\n    await this.currentState.pick(params, context)\n  }\n\n  public getPickedSocket() {\n    return this.currentState.initial\n  }\n\n  public drop(context: Context<Schemes, K>) {\n    this.currentState.drop(context)\n  }\n\n  public switchTo(state: State<Schemes, K>): void {\n    state.setContext(this)\n    this.currentState = state\n  }\n}\n","import { NodeEditor } from 'rete'\n\nimport { ClassicScheme, SocketData } from '../../../types'\n\nfunction findPort<Schemes extends ClassicScheme>(socket: SocketData, editor: NodeEditor<Schemes>) {\n  const node = editor.getNode(socket.nodeId)\n\n  if (!node) throw new Error('cannot find node')\n\n  const list = socket.side === 'input' ? node.inputs : node.outputs\n\n  return list[socket.key]\n}\nfunction findConnections<Schemes extends ClassicScheme>(socket: SocketData, editor: NodeEditor<Schemes>) {\n  const { nodeId, side, key } = socket\n\n  return editor.getConnections().filter(connection => {\n    if (side === 'input') {\n      return connection.target === nodeId && connection.targetInput === key\n    }\n    if (side === 'output') {\n      return connection.source === nodeId && connection.sourceOutput === key\n    }\n  })\n}\n\n/**\n * Remove existing connections if Port doesnt allow multiple connections\n */\nexport function syncConnections<Schemes extends ClassicScheme>(sockets: SocketData[], editor: NodeEditor<Schemes>) {\n  const connections: Schemes['Connection'][] = sockets.map(socket => {\n    const port = findPort(socket, editor)\n    const multiple = port?.multipleConnections\n\n    if (multiple) return []\n\n    return findConnections(socket, editor)\n  }).flat()\n\n  return {\n    commit() {\n      const uniqueIds = Array.from(new Set(connections.map(({ id }) => id)))\n\n      uniqueIds.forEach(id => editor.removeConnection(id))\n    }\n  }\n}\n","\nimport { ClassicScheme, SocketData } from '../../../types'\nimport { Context, Flow, PickParams } from '../../base'\nimport {\n  canMakeConnection as defaultCanMakeConnection, makeConnection as defaultMakeConnection, State, StateContext\n} from '../../utils'\nimport { syncConnections } from './sync-connections'\n\n/**\n * Classic flow params\n */\nexport type ClassicParams<Schemes extends ClassicScheme> = {\n  /** Custom function to check if connection can be made */\n  canMakeConnection: (from: SocketData, to: SocketData) => boolean | undefined\n  /** Custom function to make connection */\n  makeConnection: <K extends any[]>(from: SocketData, to: SocketData, context: Context<Schemes, K>) => boolean | undefined\n}\n\nclass Picked<Schemes extends ClassicScheme, K extends any[]> extends State<Schemes, K> {\n  constructor(public initial: SocketData, private params: ClassicParams<Schemes>) {\n    super()\n  }\n\n  async pick({ socket }: PickParams, context: Context<Schemes, K>): Promise<void> {\n    if (this.params.canMakeConnection(this.initial, socket)) {\n      syncConnections([this.initial, socket], context.editor).commit()\n      const created = this.params.makeConnection(this.initial, socket, context)\n\n      this.drop(context, created ? socket : null, created)\n    }\n  }\n\n  drop(context: Context<Schemes, K>, socket: SocketData | null = null, created = false): void {\n    if (this.initial) {\n      context.scope.emit({ type: 'connectiondrop', data: { initial: this.initial, socket, created } })\n    }\n    this.context.switchTo(new Idle(this.params))\n  }\n}\n\nclass PickedExisting<Schemes extends ClassicScheme, K extends any[]> extends State<Schemes, K> {\n  initial!: SocketData\n  outputSocket: SocketData\n\n  constructor(public connection: Schemes['Connection'], private params: ClassicParams<Schemes>, context: Context<Schemes, K>) {\n    super()\n    const outputSocket = Array.from(context.socketsCache.values()).find(data => {\n      return data.nodeId === this.connection.source\n        && data.side === 'output'\n        && data.key === this.connection.sourceOutput\n    })\n\n    if (!outputSocket) throw new Error('cannot find output socket')\n\n    this.outputSocket = outputSocket\n  }\n\n  async init(context: Context<Schemes, K>) {\n    context.scope.emit({ type: 'connectionpick', data: { socket: this.outputSocket } }).then(response => {\n      if (response) {\n        context.editor.removeConnection(this.connection.id)\n        this.initial = this.outputSocket\n      } else {\n        this.drop(context)\n      }\n    })\n  }\n\n  async pick({ socket, event }: PickParams, context: Context<Schemes, K>): Promise<void> {\n    if (this.initial && !(socket.side === 'input' && this.connection.target === socket.nodeId && this.connection.targetInput === socket.key)) {\n      if (this.params.canMakeConnection(this.initial, socket)) {\n        syncConnections([this.initial, socket], context.editor).commit()\n        const created = this.params.makeConnection(this.initial, socket, context)\n\n        this.drop(context, created ? socket : null, created)\n      }\n    } else if (event === 'down') {\n      if (this.initial) {\n        syncConnections([this.initial, socket], context.editor).commit()\n        const created = this.params.makeConnection(this.initial, socket, context)\n\n        this.drop(context, created ? socket : null, created)\n      }\n    }\n  }\n\n  drop(context: Context<Schemes, K>, socket: SocketData | null = null, created = false): void {\n    if (this.initial) {\n      context.scope.emit({ type: 'connectiondrop', data: { initial: this.initial, socket, created } })\n    }\n    this.context.switchTo(new Idle<Schemes, K>(this.params))\n  }\n}\n\nclass Idle<Schemes extends ClassicScheme, K extends any[]> extends State<Schemes, K> {\n  constructor(private params: ClassicParams<Schemes>) {\n    super()\n  }\n\n  async pick({ socket, event }: PickParams, context: Context<Schemes, K>): Promise<void> {\n    if (event !== 'down') return\n    if (socket.side === 'input') {\n      const connection = context\n        .editor.getConnections()\n        .find(item => item.target === socket.nodeId && item.targetInput === socket.key)\n\n      if (connection) {\n        const state = new PickedExisting(connection, this.params, context)\n\n        await state.init(context)\n        this.context.switchTo(state)\n        return\n      }\n    }\n\n    if (await context.scope.emit({ type: 'connectionpick', data: { socket } })) {\n      this.context.switchTo(new Picked(socket, this.params))\n    } else {\n      this.drop(context)\n    }\n  }\n\n  drop(context: Context<Schemes, K>, socket: SocketData | null = null, created = false): void {\n    if (this.initial) {\n      context.scope.emit({ type: 'connectiondrop', data: { initial: this.initial, socket, created } })\n    }\n    delete this.initial\n  }\n}\n\n/**\n * Classic flow. User can pick/click a socket and connect it by releasing/clicking on another socket.\n * If connection already exists and user clicks on input socket, connection will be removed.\n */\nexport class ClassicFlow<Schemes extends ClassicScheme, K extends any[]> implements StateContext<Schemes, K>, Flow<Schemes, K> {\n  currentState!: State<Schemes, K>\n\n  constructor(params?: Partial<ClassicParams<Schemes>>) {\n    const canMakeConnection = params?.canMakeConnection || defaultCanMakeConnection\n    const makeConnection = params?.makeConnection || defaultMakeConnection\n\n    this.switchTo(new Idle<Schemes, K>({ canMakeConnection, makeConnection }))\n  }\n\n  public async pick(params: PickParams, context: Context<Schemes, K>) {\n    await this.currentState.pick(params, context)\n  }\n\n  public getPickedSocket() {\n    return this.currentState.initial\n  }\n\n  public switchTo(state: State<Schemes, K>): void {\n    state.setContext(this)\n    this.currentState = state\n  }\n\n  public drop(context: Context<Schemes, K>) {\n    this.currentState.drop(context)\n  }\n}\n","import { ClassicFlow } from '../flow'\n\n/**\n * Classic preset. Uses `ClassicFlow` for managing connections by user\n */\nexport function setup() {\n  return () => new ClassicFlow()\n}\n","/**\n * Built-in presets\n * @module\n */\nexport * as classic from './classic'\n","import { NodeEditor, Scope } from 'rete'\nimport { BaseArea, BaseAreaPlugin, RenderSignal } from 'rete-area-plugin'\n\nimport { Flow } from './flow'\nimport { EventType } from './flow/base'\nimport { createPseudoconnection } from './pseudoconnection'\nimport { ClassicScheme, Connection, Position, Preset, Side, SocketData } from './types'\nimport { elementsFromPoint, findSocket } from './utils'\n\nexport * from './flow'\nexport * as Presets from './presets'\nexport { createPseudoconnection } from './pseudoconnection'\nexport type { Connection, ConnectionExtra, Preset, Side, SocketData } from './types'\n\ntype Requires =\n  | { type: 'pointermove', data: { position: Position, event: PointerEvent } }\n  | { type: 'pointerup', data: { position: Position, event: PointerEvent } }\n  | RenderSignal<'socket', {\n    nodeId: string,\n    side: Side,\n    key: string\n  }>\n  | { type: 'unmount', data: { element: HTMLElement } }\n\n/**\n * Connection plugin. Responsible for user interaction with connections (creation, deletion)\n * @priority 9\n * @emits connectionpick\n * @emits connectiondrop\n * @listens pointermove\n * @listens pointerup\n * @listens render\n * @listens unmount\n */\nexport class ConnectionPlugin<Schemes extends ClassicScheme, K = Requires> extends Scope<Connection, [Requires | K]> {\n  presets: Preset<Schemes>[] = []\n  private areaPlugin!: BaseAreaPlugin<Schemes, BaseArea<Schemes>>\n  private editor!: NodeEditor<Schemes>\n  private currentFlow: Flow<Schemes, any[]> | null = null\n  private preudoconnection = createPseudoconnection({ isPseudo: true })\n  private socketsCache = new Map<Element, SocketData>()\n\n  constructor() {\n    super('connection')\n  }\n\n  /**\n   * Add preset to the plugin\n   * @param preset Preset to add\n   */\n  public addPreset(preset: Preset<Schemes>) {\n    this.presets.push(preset)\n  }\n\n  private findPreset(data: SocketData) {\n    for (const preset of this.presets) {\n      const flow = preset(data)\n\n      if (flow) return flow\n    }\n    return null\n  }\n\n  update() {\n    if (!this.currentFlow) return\n    const socket = this.currentFlow.getPickedSocket()\n\n    if (socket) {\n      this.preudoconnection.render(this.areaPlugin, this.areaPlugin.area.pointer, socket)\n    }\n  }\n\n  /**\n   * Drop pseudo-connection if exists\n   * @emits connectiondrop\n   */\n  drop() {\n    const flowContext = { editor: this.editor, scope: this, socketsCache: this.socketsCache }\n\n    if (this.currentFlow) {\n      this.currentFlow.drop(flowContext)\n      this.preudoconnection.unmount(this.areaPlugin)\n      this.currentFlow = null\n    }\n  }\n\n  // eslint-disable-next-line max-statements\n  async pick(event: PointerEvent, type: EventType) {\n    const flowContext = { editor: this.editor, scope: this, socketsCache: this.socketsCache }\n    const pointedElements = elementsFromPoint(event.clientX, event.clientY)\n    const pickedSocket = findSocket(this.socketsCache, pointedElements)\n\n    if (pickedSocket) {\n      event.preventDefault()\n      event.stopPropagation()\n      this.currentFlow = this.currentFlow || this.findPreset(pickedSocket)\n\n      if (this.currentFlow) {\n        await this.currentFlow.pick({ socket: pickedSocket, event: type }, flowContext)\n        this.preudoconnection.mount(this.areaPlugin)\n      }\n    } else if (this.currentFlow) {\n      this.currentFlow.drop(flowContext)\n    }\n    if (this.currentFlow && !this.currentFlow.getPickedSocket()) {\n      this.preudoconnection.unmount(this.areaPlugin)\n      this.currentFlow = null\n    }\n    this.update()\n  }\n\n  setParent(scope: Scope<Requires | K>): void {\n    super.setParent(scope)\n    this.areaPlugin = this.parentScope<BaseAreaPlugin<Schemes, BaseArea<Schemes>>>(BaseAreaPlugin)\n    this.editor = this.areaPlugin.parentScope<NodeEditor<Schemes>>(NodeEditor)\n\n    const pointerdownSocket = (e: PointerEvent) => {\n      this.pick(e, 'down')\n    }\n\n    // eslint-disable-next-line max-statements\n    this.addPipe(context => {\n      if (!context || typeof context !== 'object' || !('type' in context)) return context\n\n      if (context.type === 'pointermove') {\n        this.update()\n      } else if (context.type === 'pointerup') {\n        this.pick(context.data.event, 'up')\n      } else if (context.type === 'render') {\n        if (context.data.type === 'socket') {\n          const { element } = context.data\n\n          element.addEventListener('pointerdown', pointerdownSocket)\n          this.socketsCache.set(element, context.data)\n        }\n      } else if (context.type === 'unmount') {\n        const { element } = context.data\n\n        element.removeEventListener('pointerdown', pointerdownSocket)\n        this.socketsCache.delete(element)\n      }\n      return context\n    })\n  }\n}\n"],"names":["createPseudoconnection","extra","element","id","unmount","areaPlugin","removeConnectionView","mount","concat","getUID","isMounted","Boolean","render","_ref","data","x","y","isOutput","side","pointer","Error","payload","_objectSpread","source","nodeId","sourceOutput","key","target","targetInput","view","addConnectionView","emit","type","end","start","findSocket","socketsCache","elements","_iterator","_createForOfIteratorHelper","_step","s","n","done","value","found","get","err","e","f","elementsFromPoint","_elements$","root","arguments","length","undefined","document","shadowRoot","unshift","apply","_toConsumableArray","Flow","_createClass","_classCallCheck","State","setContext","context","getSourceTarget","initial","socket","forward","backward","_ref2","_slicedToArray","canMakeConnection","makeConnection","_ref3","_ref4","editor","addConnection","Picked","_State","_inherits","_super","_createSuper","params","_this","call","_pick","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_callee$","_context","prev","next","drop","pickByClick","stop","pick","_x","_x2","created","scope","switchTo","Idle","_State2","_super2","_this2","_pick2","_callee2","event","_callee2$","_context2","sent","_x3","_x4","BidirectFlow","defaultMakeConnection","_pick3","_callee3","_callee3$","_context3","currentState","_x5","_x6","getPickedSocket","state","findPort","node","getNode","list","inputs","outputs","findConnections","getConnections","filter","connection","syncConnections","sockets","connections","map","port","multiple","multipleConnections","flat","commit","uniqueIds","Array","from","Set","forEach","removeConnection","PickedExisting","outputSocket","values","find","_init","_this3","then","response","init","_created","_State3","_super3","_this4","_callee4","_connection","_callee4$","_context4","abrupt","item","_x7","ClassicFlow","defaultCanMakeConnection","_pick4","_callee5","_callee5$","_context5","_x8","_x9","setup","ConnectionPlugin","_Scope","_defineProperty","_assertThisInitialized","isPseudo","Map","addPreset","preset","presets","push","findPreset","flow","update","currentFlow","preudoconnection","area","flowContext","pointedElements","pickedSocket","clientX","clientY","preventDefault","stopPropagation","setParent","_get","_getPrototypeOf","prototype","parentScope","BaseAreaPlugin","NodeEditor","pointerdownSocket","addPipe","_typeof","addEventListener","set","removeEventListener","Scope"],"mappings":"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"}