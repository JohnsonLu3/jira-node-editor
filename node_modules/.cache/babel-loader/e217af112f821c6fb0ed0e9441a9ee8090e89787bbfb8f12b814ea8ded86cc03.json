{"ast":null,"code":"import { NodeEditor, ClassicPreset } from 'rete';\nimport { AreaPlugin } from 'rete-area-plugin';\nimport { ConnectionPlugin, Presets as ConnectionPresets } from 'rete-connection-plugin';\nimport { ReactPlugin, Presets as ReactPresets } from 'rete-react-plugin';\nimport { createRoot } from 'react-dom/client';\nimport { CustomNode } from '../customization/CustomNode';\nimport { StyledNode } from '../customization/StyledNode';\nimport { CustomSocket } from '../customization/CustomSocket';\nimport { CustomConnection } from '../customization/CustomConnection';\nimport { addCustomBackground } from '../customization/custom-background';\nconst socket = new ClassicPreset.Socket('socket');\nexport async function createEditor(container) {\n  const editor = new NodeEditor();\n  const area = new AreaPlugin(container);\n  const connection = new ConnectionPlugin();\n  const reactRender = new ReactPlugin({\n    createRoot\n  });\n  reactRender.addPreset(ReactPresets.classic.setup({\n    customize: {\n      node(context) {\n        if (context.payload.label === 'Fully customized') {\n          return CustomNode;\n        }\n        if (context.payload.label === 'Override styles') {\n          return StyledNode;\n        }\n        return ReactPresets.classic.Node;\n      },\n      socket() {\n        return CustomSocket;\n      },\n      connection() {\n        return CustomConnection;\n      }\n    }\n  }));\n  connection.addPreset(ConnectionPresets.classic.setup());\n  addCustomBackground(area);\n  editor.use(area);\n  area.use(connection);\n  area.use(reactRender);\n  const aLabel = 'Override styles';\n  const bLabel = 'Fully customized';\n  const a = new ClassicPreset.Node(aLabel);\n  a.addOutput('a', new ClassicPreset.Output(socket));\n  a.addInput('a', new ClassicPreset.Input(socket));\n  await editor.addNode(a);\n  const b = new ClassicPreset.Node(bLabel);\n  b.addOutput('a', new ClassicPreset.Output(socket));\n  b.addInput('a', new ClassicPreset.Input(socket));\n  await editor.addNode(b);\n  await area.translate(a.id, {\n    x: 0,\n    y: 0\n  });\n  await area.translate(b.id, {\n    x: 300,\n    y: 0\n  });\n  await editor.addConnection(new ClassicPreset.Connection(a, 'a', b, 'a'));\n  return {\n    destroy: () => area.destroy()\n  };\n}","map":{"version":3,"names":["NodeEditor","ClassicPreset","AreaPlugin","ConnectionPlugin","Presets","ConnectionPresets","ReactPlugin","ReactPresets","createRoot","CustomNode","StyledNode","CustomSocket","CustomConnection","addCustomBackground","socket","Socket","createEditor","container","editor","area","connection","reactRender","addPreset","classic","setup","customize","node","context","payload","label","Node","use","aLabel","bLabel","a","addOutput","Output","addInput","Input","addNode","b","translate","id","x","y","addConnection","Connection","destroy"],"sources":["/Users/jolu/Documents/code/jira-node-editor/src/rete/customization.ts"],"sourcesContent":["import { NodeEditor, GetSchemes, ClassicPreset } from 'rete';\n\nimport { AreaPlugin } from 'rete-area-plugin';\nimport {\n  ConnectionPlugin,\n  Presets as ConnectionPresets,\n} from 'rete-connection-plugin';\nimport {\n  ReactPlugin,\n  ReactArea2D,\n  Presets as ReactPresets,\n} from 'rete-react-plugin';\nimport { createRoot } from 'react-dom/client';\n\nimport { CustomNode } from '../customization/CustomNode';\nimport { StyledNode } from '../customization/StyledNode';\nimport { CustomSocket } from '../customization/CustomSocket';\nimport { CustomConnection } from '../customization/CustomConnection';\n\nimport { addCustomBackground } from '../customization/custom-background';\n\ntype Schemes = GetSchemes<\n  ClassicPreset.Node,\n  ClassicPreset.Connection<ClassicPreset.Node, ClassicPreset.Node>\n>;\ntype AreaExtra = ReactArea2D<Schemes>;\n\nconst socket = new ClassicPreset.Socket('socket');\n\nexport async function createEditor(container: HTMLElement) {\n  const editor = new NodeEditor<Schemes>();\n  const area = new AreaPlugin<Schemes, AreaExtra>(container);\n  const connection = new ConnectionPlugin<Schemes, AreaExtra>();\n  const reactRender = new ReactPlugin<Schemes, AreaExtra>({ createRoot });\n\n  reactRender.addPreset(\n    ReactPresets.classic.setup({\n      customize: {\n        node(context) {\n          if (context.payload.label === 'Fully customized') {\n            return CustomNode;\n          }\n          if (context.payload.label === 'Override styles') {\n            return StyledNode;\n          }\n          return ReactPresets.classic.Node;\n        },\n        socket() {\n          return CustomSocket;\n        },\n        connection() {\n          return CustomConnection;\n        },\n      },\n    })\n  );\n\n  connection.addPreset(ConnectionPresets.classic.setup());\n\n  addCustomBackground(area);\n\n  editor.use(area);\n  area.use(connection);\n  area.use(reactRender);\n\n  const aLabel = 'Override styles';\n  const bLabel = 'Fully customized';\n\n  const a = new ClassicPreset.Node(aLabel);\n  a.addOutput('a', new ClassicPreset.Output(socket));\n  a.addInput('a', new ClassicPreset.Input(socket));\n  await editor.addNode(a);\n\n  const b = new ClassicPreset.Node(bLabel);\n  b.addOutput('a', new ClassicPreset.Output(socket));\n  b.addInput('a', new ClassicPreset.Input(socket));\n  await editor.addNode(b);\n\n  await area.translate(a.id, { x: 0, y: 0 });\n  await area.translate(b.id, { x: 300, y: 0 });\n\n  await editor.addConnection(new ClassicPreset.Connection(a, 'a', b, 'a'));\n\n  return {\n    destroy: () => area.destroy(),\n  };\n}\n"],"mappings":"AAAA,SAASA,UAAU,EAAcC,aAAa,QAAQ,MAAM;AAE5D,SAASC,UAAU,QAAQ,kBAAkB;AAC7C,SACEC,gBAAgB,EAChBC,OAAO,IAAIC,iBAAiB,QACvB,wBAAwB;AAC/B,SACEC,WAAW,EAEXF,OAAO,IAAIG,YAAY,QAClB,mBAAmB;AAC1B,SAASC,UAAU,QAAQ,kBAAkB;AAE7C,SAASC,UAAU,QAAQ,6BAA6B;AACxD,SAASC,UAAU,QAAQ,6BAA6B;AACxD,SAASC,YAAY,QAAQ,+BAA+B;AAC5D,SAASC,gBAAgB,QAAQ,mCAAmC;AAEpE,SAASC,mBAAmB,QAAQ,oCAAoC;AAQxE,MAAMC,MAAM,GAAG,IAAIb,aAAa,CAACc,MAAM,CAAC,QAAQ,CAAC;AAEjD,OAAO,eAAeC,YAAYA,CAACC,SAAsB,EAAE;EACzD,MAAMC,MAAM,GAAG,IAAIlB,UAAU,CAAU,CAAC;EACxC,MAAMmB,IAAI,GAAG,IAAIjB,UAAU,CAAqBe,SAAS,CAAC;EAC1D,MAAMG,UAAU,GAAG,IAAIjB,gBAAgB,CAAqB,CAAC;EAC7D,MAAMkB,WAAW,GAAG,IAAIf,WAAW,CAAqB;IAAEE;EAAW,CAAC,CAAC;EAEvEa,WAAW,CAACC,SAAS,CACnBf,YAAY,CAACgB,OAAO,CAACC,KAAK,CAAC;IACzBC,SAAS,EAAE;MACTC,IAAIA,CAACC,OAAO,EAAE;QACZ,IAAIA,OAAO,CAACC,OAAO,CAACC,KAAK,KAAK,kBAAkB,EAAE;UAChD,OAAOpB,UAAU;QACnB;QACA,IAAIkB,OAAO,CAACC,OAAO,CAACC,KAAK,KAAK,iBAAiB,EAAE;UAC/C,OAAOnB,UAAU;QACnB;QACA,OAAOH,YAAY,CAACgB,OAAO,CAACO,IAAI;MAClC,CAAC;MACDhB,MAAMA,CAAA,EAAG;QACP,OAAOH,YAAY;MACrB,CAAC;MACDS,UAAUA,CAAA,EAAG;QACX,OAAOR,gBAAgB;MACzB;IACF;EACF,CAAC,CACH,CAAC;EAEDQ,UAAU,CAACE,SAAS,CAACjB,iBAAiB,CAACkB,OAAO,CAACC,KAAK,CAAC,CAAC,CAAC;EAEvDX,mBAAmB,CAACM,IAAI,CAAC;EAEzBD,MAAM,CAACa,GAAG,CAACZ,IAAI,CAAC;EAChBA,IAAI,CAACY,GAAG,CAACX,UAAU,CAAC;EACpBD,IAAI,CAACY,GAAG,CAACV,WAAW,CAAC;EAErB,MAAMW,MAAM,GAAG,iBAAiB;EAChC,MAAMC,MAAM,GAAG,kBAAkB;EAEjC,MAAMC,CAAC,GAAG,IAAIjC,aAAa,CAAC6B,IAAI,CAACE,MAAM,CAAC;EACxCE,CAAC,CAACC,SAAS,CAAC,GAAG,EAAE,IAAIlC,aAAa,CAACmC,MAAM,CAACtB,MAAM,CAAC,CAAC;EAClDoB,CAAC,CAACG,QAAQ,CAAC,GAAG,EAAE,IAAIpC,aAAa,CAACqC,KAAK,CAACxB,MAAM,CAAC,CAAC;EAChD,MAAMI,MAAM,CAACqB,OAAO,CAACL,CAAC,CAAC;EAEvB,MAAMM,CAAC,GAAG,IAAIvC,aAAa,CAAC6B,IAAI,CAACG,MAAM,CAAC;EACxCO,CAAC,CAACL,SAAS,CAAC,GAAG,EAAE,IAAIlC,aAAa,CAACmC,MAAM,CAACtB,MAAM,CAAC,CAAC;EAClD0B,CAAC,CAACH,QAAQ,CAAC,GAAG,EAAE,IAAIpC,aAAa,CAACqC,KAAK,CAACxB,MAAM,CAAC,CAAC;EAChD,MAAMI,MAAM,CAACqB,OAAO,CAACC,CAAC,CAAC;EAEvB,MAAMrB,IAAI,CAACsB,SAAS,CAACP,CAAC,CAACQ,EAAE,EAAE;IAAEC,CAAC,EAAE,CAAC;IAAEC,CAAC,EAAE;EAAE,CAAC,CAAC;EAC1C,MAAMzB,IAAI,CAACsB,SAAS,CAACD,CAAC,CAACE,EAAE,EAAE;IAAEC,CAAC,EAAE,GAAG;IAAEC,CAAC,EAAE;EAAE,CAAC,CAAC;EAE5C,MAAM1B,MAAM,CAAC2B,aAAa,CAAC,IAAI5C,aAAa,CAAC6C,UAAU,CAACZ,CAAC,EAAE,GAAG,EAAEM,CAAC,EAAE,GAAG,CAAC,CAAC;EAExE,OAAO;IACLO,OAAO,EAAEA,CAAA,KAAM5B,IAAI,CAAC4B,OAAO,CAAC;EAC9B,CAAC;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}