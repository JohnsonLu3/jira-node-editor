{"ast":null,"code":"/*!\n* rete v2.0.2\n* (c) 2024 Vitaliy Stoliarov\n* Released under the MIT license.\n* */\nimport _asyncToGenerator from '@babel/runtime/helpers/asyncToGenerator';\nimport _classCallCheck from '@babel/runtime/helpers/classCallCheck';\nimport _createClass from '@babel/runtime/helpers/createClass';\nimport _assertThisInitialized from '@babel/runtime/helpers/assertThisInitialized';\nimport _inherits from '@babel/runtime/helpers/inherits';\nimport _possibleConstructorReturn from '@babel/runtime/helpers/possibleConstructorReturn';\nimport _getPrototypeOf from '@babel/runtime/helpers/getPrototypeOf';\nimport _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport _regeneratorRuntime from '@babel/runtime/regenerator';\nfunction _createForOfIteratorHelper$1(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n  if (!it) {\n    if (Array.isArray(o) || (it = _unsupportedIterableToArray$1(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n      var F = function F() {};\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n  var normalCompletion = true,\n    didErr = false,\n    err;\n  return {\n    s: function s() {\n      it = it.call(o);\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}\nfunction _unsupportedIterableToArray$1(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray$1(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$1(o, minLen);\n}\nfunction _arrayLikeToArray$1(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n  return arr2;\n}\n/* eslint-disable @typescript-eslint/naming-convention */\n\n/**\n * A middleware type that can modify the data\n * @typeParam T - The data type\n * @param data - The data to be modified\n * @returns The modified data or undefined\n * @example (data) => data + 1\n * @example (data) => undefined // will stop the execution\n * @internal\n */\n\n/**\n * Validate the Scope signals and replace the parameter type with an error message if they are not assignable\n * @internal\n */\n\n/**\n * Provides 'debug' method to check the detailed assignment error message\n * @example .debug($ => $)\n * @internal\n */\nfunction useHelper() {\n  return {\n    debug: function debug(f) {}\n  };\n}\n\n/**\n * A signal is a middleware chain that can be used to modify the data\n * @typeParam T - The data type\n * @internal\n */\nvar Signal = /*#__PURE__*/function () {\n  function Signal() {\n    _classCallCheck(this, Signal);\n    _defineProperty(this, \"pipes\", []);\n  }\n  _createClass(Signal, [{\n    key: \"addPipe\",\n    value: function addPipe(pipe) {\n      this.pipes.push(pipe);\n    }\n  }, {\n    key: \"emit\",\n    value: function () {\n      var _emit = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(context) {\n        var current, _iterator, _step, pipe;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              current = context;\n              _iterator = _createForOfIteratorHelper$1(this.pipes);\n              _context.prev = 2;\n              _iterator.s();\n            case 4:\n              if ((_step = _iterator.n()).done) {\n                _context.next = 13;\n                break;\n              }\n              pipe = _step.value;\n              _context.next = 8;\n              return pipe(current);\n            case 8:\n              current = _context.sent;\n              if (!(typeof current === 'undefined')) {\n                _context.next = 11;\n                break;\n              }\n              return _context.abrupt(\"return\");\n            case 11:\n              _context.next = 4;\n              break;\n            case 13:\n              _context.next = 18;\n              break;\n            case 15:\n              _context.prev = 15;\n              _context.t0 = _context[\"catch\"](2);\n              _iterator.e(_context.t0);\n            case 18:\n              _context.prev = 18;\n              _iterator.f();\n              return _context.finish(18);\n            case 21:\n              return _context.abrupt(\"return\", current);\n            case 22:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this, [[2, 15, 18, 21]]);\n      }));\n      function emit(_x) {\n        return _emit.apply(this, arguments);\n      }\n      return emit;\n    }()\n  }]);\n  return Signal;\n}();\n/**\n * Base class for all plugins and the core. Provides a signals mechanism to modify the data\n */\nvar Scope = /*#__PURE__*/function () {\n  // Parents['length'] extends 0 ? undefined : Scope<Parents[0], Tail<Parents>>\n\n  function Scope(name) {\n    _classCallCheck(this, Scope);\n    _defineProperty(this, \"signal\", new Signal());\n    this.name = name;\n  }\n  _createClass(Scope, [{\n    key: \"addPipe\",\n    value: function addPipe(middleware) {\n      this.signal.addPipe(middleware);\n    }\n  }, {\n    key: \"use\",\n    value: function use(scope) {\n      if (!(scope instanceof Scope)) throw new Error('cannot use non-Scope instance');\n      scope.setParent(this);\n      this.addPipe(function (context) {\n        return scope.signal.emit(context);\n      });\n      return useHelper();\n    }\n  }, {\n    key: \"setParent\",\n    value: function setParent(scope) {\n      this.parent = scope;\n    }\n  }, {\n    key: \"emit\",\n    value: function emit(context) {\n      return this.signal.emit(context);\n    }\n  }, {\n    key: \"hasParent\",\n    value: function hasParent() {\n      return Boolean(this.parent);\n    }\n  }, {\n    key: \"parentScope\",\n    value: function parentScope(type) {\n      if (!this.parent) throw new Error('cannot find parent');\n      if (type && this.parent instanceof type) return this.parent;\n      if (type) throw new Error('actual parent is not instance of type');\n      return this.parent;\n    }\n  }]);\n  return Scope;\n}();\nfunction _createForOfIteratorHelper(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n  if (!it) {\n    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n      var F = function F() {};\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n  var normalCompletion = true,\n    didErr = false,\n    err;\n  return {\n    s: function s() {\n      it = it.call(o);\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n  return arr2;\n}\nfunction _createSuper$1(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct$1();\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n      result;\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n    return _possibleConstructorReturn(this, result);\n  };\n}\nfunction _isNativeReflectConstruct$1() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\n/**\n * Signal types produced by NodeEditor instance\n * @typeParam Scheme - The scheme type\n * @priority 10\n * @group Primary\n */\n\n/**\n * The NodeEditor class is the entry class. It is used to create and manage nodes and connections.\n * @typeParam Scheme - The scheme type\n * @priority 7\n * @group Primary\n */\nvar NodeEditor = /*#__PURE__*/function (_Scope) {\n  _inherits(NodeEditor, _Scope);\n  var _super = _createSuper$1(NodeEditor);\n  function NodeEditor() {\n    var _this;\n    _classCallCheck(this, NodeEditor);\n    _this = _super.call(this, 'NodeEditor');\n    _defineProperty(_assertThisInitialized(_this), \"nodes\", []);\n    _defineProperty(_assertThisInitialized(_this), \"connections\", []);\n    return _this;\n  }\n\n  /**\n   * Get a node by id\n   * @param id - The node id\n   * @returns The node or undefined\n   */\n  _createClass(NodeEditor, [{\n    key: \"getNode\",\n    value: function getNode(id) {\n      return this.nodes.find(function (node) {\n        return node.id === id;\n      });\n    }\n\n    /**\n     * Get all nodes\n     * @returns Copy of array with nodes\n     */\n  }, {\n    key: \"getNodes\",\n    value: function getNodes() {\n      return this.nodes.slice();\n    }\n\n    /**\n     * Get all connections\n     * @returns Copy of array with onnections\n     */\n  }, {\n    key: \"getConnections\",\n    value: function getConnections() {\n      return this.connections.slice();\n    }\n\n    /**\n     * Get a connection by id\n     * @param id - The connection id\n     * @returns The connection or undefined\n     */\n  }, {\n    key: \"getConnection\",\n    value: function getConnection(id) {\n      return this.connections.find(function (connection) {\n        return connection.id === id;\n      });\n    }\n\n    /**\n     * Add a node\n     * @param data - The node data\n     * @returns Whether the node was added\n     * @throws If the node has already been added\n     * @emits nodecreate\n     * @emits nodecreated\n     */\n  }, {\n    key: \"addNode\",\n    value: function () {\n      var _addNode = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(data) {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              if (!this.getNode(data.id)) {\n                _context.next = 2;\n                break;\n              }\n              throw new Error('node has already been added');\n            case 2:\n              _context.next = 4;\n              return this.emit({\n                type: 'nodecreate',\n                data: data\n              });\n            case 4:\n              if (_context.sent) {\n                _context.next = 6;\n                break;\n              }\n              return _context.abrupt(\"return\", false);\n            case 6:\n              this.nodes.push(data);\n              _context.next = 9;\n              return this.emit({\n                type: 'nodecreated',\n                data: data\n              });\n            case 9:\n              return _context.abrupt(\"return\", true);\n            case 10:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }));\n      function addNode(_x) {\n        return _addNode.apply(this, arguments);\n      }\n      return addNode;\n    }()\n    /**\n     * Add a connection\n     * @param data - The connection data\n     * @returns Whether the connection was added\n     * @throws If the connection has already been added\n     * @emits connectioncreate\n     * @emits connectioncreated\n     */\n  }, {\n    key: \"addConnection\",\n    value: function () {\n      var _addConnection = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(data) {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              if (!this.getConnection(data.id)) {\n                _context2.next = 2;\n                break;\n              }\n              throw new Error('connection has already been added');\n            case 2:\n              _context2.next = 4;\n              return this.emit({\n                type: 'connectioncreate',\n                data: data\n              });\n            case 4:\n              if (_context2.sent) {\n                _context2.next = 6;\n                break;\n              }\n              return _context2.abrupt(\"return\", false);\n            case 6:\n              this.connections.push(data);\n              _context2.next = 9;\n              return this.emit({\n                type: 'connectioncreated',\n                data: data\n              });\n            case 9:\n              return _context2.abrupt(\"return\", true);\n            case 10:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, this);\n      }));\n      function addConnection(_x2) {\n        return _addConnection.apply(this, arguments);\n      }\n      return addConnection;\n    }()\n    /**\n     * Remove a node\n     * @param id - The node id\n     * @returns Whether the node was removed\n     * @throws If the node cannot be found\n     * @emits noderemove\n     * @emits noderemoved\n     */\n  }, {\n    key: \"removeNode\",\n    value: function () {\n      var _removeNode = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(id) {\n        var index, node;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              index = this.nodes.findIndex(function (n) {\n                return n.id === id;\n              });\n              node = this.nodes[index];\n              if (!(index < 0)) {\n                _context3.next = 4;\n                break;\n              }\n              throw new Error('cannot find node');\n            case 4:\n              _context3.next = 6;\n              return this.emit({\n                type: 'noderemove',\n                data: node\n              });\n            case 6:\n              if (_context3.sent) {\n                _context3.next = 8;\n                break;\n              }\n              return _context3.abrupt(\"return\", false);\n            case 8:\n              this.nodes.splice(index, 1);\n              _context3.next = 11;\n              return this.emit({\n                type: 'noderemoved',\n                data: node\n              });\n            case 11:\n              return _context3.abrupt(\"return\", true);\n            case 12:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3, this);\n      }));\n      function removeNode(_x3) {\n        return _removeNode.apply(this, arguments);\n      }\n      return removeNode;\n    }()\n    /**\n     * Remove a connection\n     * @param id - The connection id\n     * @returns Whether the connection was removed\n     * @throws If the connection cannot be found\n     * @emits connectionremove\n     * @emits connectionremoved\n     */\n  }, {\n    key: \"removeConnection\",\n    value: function () {\n      var _removeConnection = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(id) {\n        var index, connection;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) switch (_context4.prev = _context4.next) {\n            case 0:\n              index = this.connections.findIndex(function (n) {\n                return n.id === id;\n              });\n              connection = this.connections[index];\n              if (!(index < 0)) {\n                _context4.next = 4;\n                break;\n              }\n              throw new Error('cannot find connection');\n            case 4:\n              _context4.next = 6;\n              return this.emit({\n                type: 'connectionremove',\n                data: connection\n              });\n            case 6:\n              if (_context4.sent) {\n                _context4.next = 8;\n                break;\n              }\n              return _context4.abrupt(\"return\", false);\n            case 8:\n              this.connections.splice(index, 1);\n              _context4.next = 11;\n              return this.emit({\n                type: 'connectionremoved',\n                data: connection\n              });\n            case 11:\n              return _context4.abrupt(\"return\", true);\n            case 12:\n            case \"end\":\n              return _context4.stop();\n          }\n        }, _callee4, this);\n      }));\n      function removeConnection(_x4) {\n        return _removeConnection.apply(this, arguments);\n      }\n      return removeConnection;\n    }()\n    /**\n     * Clear all nodes and connections\n     * @returns Whether the editor was cleared\n     * @emits clear\n     * @emits clearcancelled\n     * @emits cleared\n     */\n  }, {\n    key: \"clear\",\n    value: function () {\n      var _clear = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n        var _iterator, _step, connection, _iterator2, _step2, node;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) switch (_context5.prev = _context5.next) {\n            case 0:\n              _context5.next = 2;\n              return this.emit({\n                type: 'clear'\n              });\n            case 2:\n              if (_context5.sent) {\n                _context5.next = 6;\n                break;\n              }\n              _context5.next = 5;\n              return this.emit({\n                type: 'clearcancelled'\n              });\n            case 5:\n              return _context5.abrupt(\"return\", false);\n            case 6:\n              _iterator = _createForOfIteratorHelper(this.connections.slice());\n              _context5.prev = 7;\n              _iterator.s();\n            case 9:\n              if ((_step = _iterator.n()).done) {\n                _context5.next = 15;\n                break;\n              }\n              connection = _step.value;\n              _context5.next = 13;\n              return this.removeConnection(connection.id);\n            case 13:\n              _context5.next = 9;\n              break;\n            case 15:\n              _context5.next = 20;\n              break;\n            case 17:\n              _context5.prev = 17;\n              _context5.t0 = _context5[\"catch\"](7);\n              _iterator.e(_context5.t0);\n            case 20:\n              _context5.prev = 20;\n              _iterator.f();\n              return _context5.finish(20);\n            case 23:\n              _iterator2 = _createForOfIteratorHelper(this.nodes.slice());\n              _context5.prev = 24;\n              _iterator2.s();\n            case 26:\n              if ((_step2 = _iterator2.n()).done) {\n                _context5.next = 32;\n                break;\n              }\n              node = _step2.value;\n              _context5.next = 30;\n              return this.removeNode(node.id);\n            case 30:\n              _context5.next = 26;\n              break;\n            case 32:\n              _context5.next = 37;\n              break;\n            case 34:\n              _context5.prev = 34;\n              _context5.t1 = _context5[\"catch\"](24);\n              _iterator2.e(_context5.t1);\n            case 37:\n              _context5.prev = 37;\n              _iterator2.f();\n              return _context5.finish(37);\n            case 40:\n              _context5.next = 42;\n              return this.emit({\n                type: 'cleared'\n              });\n            case 42:\n              return _context5.abrupt(\"return\", true);\n            case 43:\n            case \"end\":\n              return _context5.stop();\n          }\n        }, _callee5, this, [[7, 17, 20, 23], [24, 34, 37, 40]]);\n      }));\n      function clear() {\n        return _clear.apply(this, arguments);\n      }\n      return clear;\n    }()\n  }]);\n  return NodeEditor;\n}(Scope);\n\n/* global globalThis*/\nvar crypto = globalThis.crypto;\n\n/**\n * @returns A unique id\n */\nfunction getUID() {\n  if ('randomBytes' in crypto) {\n    return crypto.randomBytes(8).toString('hex');\n  }\n  var bytes = crypto.getRandomValues(new Uint8Array(8));\n  var array = Array.from(bytes);\n  var hexPairs = array.map(function (b) {\n    return b.toString(16).padStart(2, '0');\n  });\n  return hexPairs.join('');\n}\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n      result;\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n    return _possibleConstructorReturn(this, result);\n  };\n}\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n/**\n * The socket class\n * @priority 7\n */\nvar Socket = /*#__PURE__*/_createClass(\n/**\n * @constructor\n * @param name Name of the socket\n */\nfunction Socket(name) {\n  _classCallCheck(this, Socket);\n  this.name = name;\n});\n\n/**\n * General port class\n */\nvar Port = /*#__PURE__*/_createClass(\n/**\n * Port id, unique string generated by `getUID` function\n */\n\n/**\n * Port index, used for sorting ports. Default is `0`\n */\n\n/**\n * @constructor\n * @param socket Socket instance\n * @param label Label of the port\n * @param multipleConnections Whether the output port can have multiple connections\n */\nfunction Port(socket, label, multipleConnections) {\n  _classCallCheck(this, Port);\n  this.socket = socket;\n  this.label = label;\n  this.multipleConnections = multipleConnections;\n  this.id = getUID();\n});\n\n/**\n * The input port class\n * @priority 6\n */\nvar Input = /*#__PURE__*/function (_Port) {\n  _inherits(Input, _Port);\n  var _super = _createSuper(Input);\n  /**\n   * @constructor\n   * @param socket Socket instance\n   * @param label Label of the input port\n   * @param multipleConnections Whether the output port can have multiple connections. Default is `false`\n   */\n  function Input(socket, label, multipleConnections) {\n    var _this;\n    _classCallCheck(this, Input);\n    _this = _super.call(this, socket, label, multipleConnections);\n    /**\n     * Control instance\n     */\n    _defineProperty(_assertThisInitialized(_this), \"control\", null);\n    /**\n     * Whether the control is visible. Can be managed dynamically by extensions. Default is `true`\n     */\n    _defineProperty(_assertThisInitialized(_this), \"showControl\", true);\n    _this.socket = socket;\n    _this.label = label;\n    _this.multipleConnections = multipleConnections;\n    return _this;\n  }\n\n  /**\n   * Add control to the input port\n   * @param control Control instance\n   */\n  _createClass(Input, [{\n    key: \"addControl\",\n    value: function addControl(control) {\n      if (this.control) throw new Error('control already added for this input');\n      this.control = control;\n    }\n\n    /**\n     * Remove control from the input port\n     */\n  }, {\n    key: \"removeControl\",\n    value: function removeControl() {\n      this.control = null;\n    }\n  }]);\n  return Input;\n}(Port);\n\n/**\n * The output port class\n * @priority 5\n */\nvar Output = /*#__PURE__*/function (_Port2) {\n  _inherits(Output, _Port2);\n  var _super2 = _createSuper(Output);\n  /**\n   * @constructor\n   * @param socket Socket instance\n   * @param label Label of the output port\n   * @param multipleConnections Whether the output port can have multiple connections. Default is `true`\n   */\n  function Output(socket, label, multipleConnections) {\n    _classCallCheck(this, Output);\n    return _super2.call(this, socket, label, multipleConnections !== false);\n  }\n  return _createClass(Output);\n}(Port);\n\n/**\n * General control class\n * @priority 5\n */\nvar Control = /*#__PURE__*/_createClass(\n/**\n * Control id, unique string generated by `getUID` function\n */\n\n/**\n * Control index, used for sorting controls. Default is `0`\n */\n\nfunction Control() {\n  _classCallCheck(this, Control);\n  this.id = getUID();\n});\n\n/**\n * Input control options\n */\n\n/**\n * The input control class\n * @example new InputControl('text', { readonly: true, initial: 'hello' })\n */\nvar InputControl = /*#__PURE__*/function (_Control) {\n  _inherits(InputControl, _Control);\n  var _super3 = _createSuper(InputControl);\n  /**\n   * @constructor\n   * @param type Type of the control: `text` or `number`\n   * @param options Control options\n   */\n  function InputControl(type, options) {\n    var _this2;\n    _classCallCheck(this, InputControl);\n    _this2 = _super3.call(this);\n    _this2.type = type;\n    _this2.options = options;\n    _this2.id = getUID();\n    _this2.readonly = options === null || options === void 0 ? void 0 : options.readonly;\n    if (typeof (options === null || options === void 0 ? void 0 : options.initial) !== 'undefined') _this2.value = options.initial;\n    return _this2;\n  }\n\n  /**\n   * Set control value\n   * @param value Value to set\n   */\n  _createClass(InputControl, [{\n    key: \"setValue\",\n    value: function setValue(value) {\n      var _this$options;\n      this.value = value;\n      if ((_this$options = this.options) !== null && _this$options !== void 0 && _this$options.change) this.options.change(value);\n    }\n  }]);\n  return InputControl;\n}(Control);\n\n/**\n * The node class\n * @priority 10\n * @example new Node('math')\n */\nvar Node = /*#__PURE__*/function () {\n  /**\n   * Whether the node is selected. Default is `false`\n   */\n\n  function Node(label) {\n    _classCallCheck(this, Node);\n    /**\n     * Node id, unique string generated by `getUID` function\n     */\n    /**\n     * Node inputs\n     */\n    _defineProperty(this, \"inputs\", {});\n    /**\n     * Node outputs\n     */\n    _defineProperty(this, \"outputs\", {});\n    /**\n     * Node controls\n     */\n    _defineProperty(this, \"controls\", {});\n    this.label = label;\n    this.id = getUID();\n  }\n  _createClass(Node, [{\n    key: \"hasInput\",\n    value: function hasInput(key) {\n      return Object.prototype.hasOwnProperty.call(this.inputs, key);\n    }\n  }, {\n    key: \"addInput\",\n    value: function addInput(key, input) {\n      if (this.hasInput(key)) throw new Error(\"input with key '\".concat(String(key), \"' already added\"));\n      Object.defineProperty(this.inputs, key, {\n        value: input,\n        enumerable: true,\n        configurable: true\n      });\n    }\n  }, {\n    key: \"removeInput\",\n    value: function removeInput(key) {\n      delete this.inputs[key];\n    }\n  }, {\n    key: \"hasOutput\",\n    value: function hasOutput(key) {\n      return Object.prototype.hasOwnProperty.call(this.outputs, key);\n    }\n  }, {\n    key: \"addOutput\",\n    value: function addOutput(key, output) {\n      if (this.hasOutput(key)) throw new Error(\"output with key '\".concat(String(key), \"' already added\"));\n      Object.defineProperty(this.outputs, key, {\n        value: output,\n        enumerable: true,\n        configurable: true\n      });\n    }\n  }, {\n    key: \"removeOutput\",\n    value: function removeOutput(key) {\n      delete this.outputs[key];\n    }\n  }, {\n    key: \"hasControl\",\n    value: function hasControl(key) {\n      return Object.prototype.hasOwnProperty.call(this.controls, key);\n    }\n  }, {\n    key: \"addControl\",\n    value: function addControl(key, control) {\n      if (this.hasControl(key)) throw new Error(\"control with key '\".concat(String(key), \"' already added\"));\n      Object.defineProperty(this.controls, key, {\n        value: control,\n        enumerable: true,\n        configurable: true\n      });\n    }\n  }, {\n    key: \"removeControl\",\n    value: function removeControl(key) {\n      delete this.controls[key];\n    }\n  }]);\n  return Node;\n}();\n\n/**\n * The connection class\n * @priority 9\n */\nvar Connection = /*#__PURE__*/_createClass(\n/**\n * Connection id, unique string generated by `getUID` function\n */\n\n/**\n * Source node id\n */\n\n/**\n * Target node id\n */\n\n/**\n * @constructor\n * @param source Source node instance\n * @param sourceOutput Source node output key\n * @param target Target node instance\n * @param targetInput Target node input key\n */\nfunction Connection(source, sourceOutput, target, targetInput) {\n  _classCallCheck(this, Connection);\n  this.sourceOutput = sourceOutput;\n  this.targetInput = targetInput;\n  if (!source.outputs[sourceOutput]) {\n    throw new Error(\"source node doesn't have output with a key \".concat(String(sourceOutput)));\n  }\n  if (!target.inputs[targetInput]) {\n    throw new Error(\"target node doesn't have input with a key \".concat(String(targetInput)));\n  }\n  this.id = getUID();\n  this.source = source.id;\n  this.target = target.id;\n});\nvar classic = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  Socket: Socket,\n  Port: Port,\n  Input: Input,\n  Output: Output,\n  Control: Control,\n  InputControl: InputControl,\n  Node: Node,\n  Connection: Connection\n});\nexport { classic as ClassicPreset, NodeEditor, Scope, Signal, getUID };","map":{"version":3,"names":["useHelper","debug","f","Signal","_classCallCheck","_defineProperty","_createClass","key","value","addPipe","pipe","pipes","push","_emit","_asyncToGenerator","_regeneratorRuntime","mark","_callee","context","current","_iterator","_step","wrap","_callee$","_context","prev","next","_createForOfIteratorHelper$1","s","n","done","sent","abrupt","t0","e","finish","stop","emit","_x","apply","arguments","Scope","name","middleware","signal","use","scope","Error","setParent","parent","hasParent","Boolean","parentScope","type","NodeEditor","_Scope","_inherits","_super","_createSuper$1","_this","call","_assertThisInitialized","getNode","id","nodes","find","node","getNodes","slice","getConnections","connections","getConnection","connection","_addNode","data","addNode","_addConnection","_callee2","_callee2$","_context2","addConnection","_x2","_removeNode","_callee3","index","_callee3$","_context3","findIndex","splice","removeNode","_x3","_removeConnection","_callee4","_callee4$","_context4","removeConnection","_x4","_clear","_callee5","_iterator2","_step2","_callee5$","_context5","_createForOfIteratorHelper","t1","clear","crypto","globalThis","getUID","randomBytes","toString","bytes","getRandomValues","Uint8Array","array","Array","from","hexPairs","map","b","padStart","join","Socket","Port","socket","label","multipleConnections","Input","_Port","_createSuper","addControl","control","removeControl","Output","_Port2","_super2","Control","InputControl","_Control","_super3","options","_this2","readonly","initial","setValue","_this$options","change","Node","hasInput","Object","prototype","hasOwnProperty","inputs","addInput","input","concat","String","defineProperty","enumerable","configurable","removeInput","hasOutput","outputs","addOutput","output","removeOutput","hasControl","controls","Connection","source","sourceOutput","target","targetInput"],"sources":["/Users/jolu/Documents/code/jira-node-editor/node_modules/rete/src/scope.ts","/Users/jolu/Documents/code/jira-node-editor/node_modules/rete/src/editor.ts","/Users/jolu/Documents/code/jira-node-editor/node_modules/rete/src/utils.ts","/Users/jolu/Documents/code/jira-node-editor/node_modules/rete/src/presets/classic.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/naming-convention */\nimport {\n  AcceptPartialUnion, CanAssignSignal, GetAssignmentReferences, GetNonAssignableElements, Tail\n} from './utility-types'\n\nexport type { CanAssignSignal }\n\n/**\n * A middleware type that can modify the data\n * @typeParam T - The data type\n * @param data - The data to be modified\n * @returns The modified data or undefined\n * @example (data) => data + 1\n * @example (data) => undefined // will stop the execution\n * @internal\n */\nexport type Pipe<T> = (data: T) => Promise<undefined | T> | undefined | T\n\nexport type CanAssignEach<D extends any[], F extends any[]> = D extends [infer H1, ...infer Tail1]\n  ? (\n    F extends [infer H2, ...infer Tail2] ?\n    [CanAssignSignal<H1, H2>, ...CanAssignEach<Tail1, Tail2>]\n    : []\n  ) : []\n\nexport type ScopeAsParameter<S extends Scope<any, any[]>, Current extends any[]> = (CanAssignEach<[S['__scope']['produces'], ...S['__scope']['parents']], Current>[number] extends true\n  ? S\n  : 'Argument Scope does not provide expected signals'\n)\n\n/**\n * Validate the Scope signals and replace the parameter type with an error message if they are not assignable\n * @internal\n */\nexport type NestedScope<S extends Scope<any, any[]>, Current extends any[]> = (CanAssignEach<Current, S['__scope']['parents']>[number] extends true\n  ? S\n  : 'Parent signals do not satisfy the connected scope. Please use `.debug($ => $) for detailed assignment error'\n)\n\n/**\n * Provides 'debug' method to check the detailed assignment error message\n * @example .debug($ => $)\n * @internal\n */\nexport function useHelper<S extends Scope<any, any[]>, Signals>() {\n  type T1 = S['__scope']['parents'][number]\n  return {\n    debug<T extends GetNonAssignableElements<T1, Signals>>(f: (p: GetAssignmentReferences<T, Signals>) => T) {\n      f\n    }\n  }\n}\n\n/**\n * A signal is a middleware chain that can be used to modify the data\n * @typeParam T - The data type\n * @internal\n */\nexport class Signal<T> {\n  pipes: Pipe<T>[] = []\n\n  addPipe(pipe: Pipe<T>) {\n    this.pipes.push(pipe)\n  }\n\n  async emit<Context extends T>(context: Context): Promise<Context | undefined> {\n    let current: Context | undefined = context\n\n    for (const pipe of this.pipes) {\n      current = await pipe(current) as Context\n\n      if (typeof current === 'undefined') return\n    }\n    return current\n  }\n}\n\ntype Type<T> = {\n  new(...args: any[]): T;\n} | (abstract new (...args: any[]) => T)\n\n/**\n * Base class for all plugins and the core. Provides a signals mechanism to modify the data\n */\nexport class Scope<Produces, Parents extends unknown[] = []> {\n  signal = new Signal<AcceptPartialUnion<Produces | Parents[number]>>()\n  parent?: any // Parents['length'] extends 0 ? undefined : Scope<Parents[0], Tail<Parents>>\n  __scope: {\n    produces: Produces\n    parents: Parents\n  }\n\n  constructor(public name: string) { }\n\n  addPipe(middleware: Pipe<Produces | Parents[number]>) {\n    this.signal.addPipe(middleware)\n  }\n\n  use<S extends Scope<any, any[]>>(scope: NestedScope<S, [Produces, ...Parents]>) {\n    if (!(scope instanceof Scope)) throw new Error('cannot use non-Scope instance')\n\n    scope.setParent(this)\n    this.addPipe(context => {\n      return scope.signal.emit(context)\n    })\n\n    return useHelper<S, Produces | Parents[number]>()\n  }\n\n  setParent(scope: Scope<Parents[0], Tail<Parents>>) {\n    this.parent = scope\n  }\n\n  emit<C extends Produces>(context: C): Promise<Extract<Produces, C> | undefined> {\n    return this.signal.emit(context) as Promise<Extract<Produces, C>>\n  }\n\n  hasParent(): boolean {\n    return Boolean(this.parent)\n  }\n\n  parentScope<T extends Parents[0], P extends Tail<Parents>>(): Scope<T, P>\n  parentScope<T>(type: Type<T>): T\n  parentScope<T>(type?: Type<T>): T {\n    if (!this.parent) throw new Error('cannot find parent')\n    if (type && this.parent instanceof type) return this.parent\n    if (type) throw new Error('actual parent is not instance of type')\n    return this.parent\n  }\n}\n","import { Scope } from './scope'\nimport { BaseSchemes } from './types'\n\n/**\n * Signal types produced by NodeEditor instance\n * @typeParam Scheme - The scheme type\n * @priority 10\n * @group Primary\n */\nexport type Root<Scheme extends BaseSchemes> =\n  | { type: 'nodecreate', data: Scheme['Node'] }\n  | { type: 'nodecreated', data: Scheme['Node'] }\n  | { type: 'noderemove', data: Scheme['Node'] }\n  | { type: 'noderemoved', data: Scheme['Node'] }\n  | { type: 'connectioncreate', data: Scheme['Connection'] }\n  | { type: 'connectioncreated', data: Scheme['Connection'] }\n  | { type: 'connectionremove', data: Scheme['Connection'] }\n  | { type: 'connectionremoved', data: Scheme['Connection'] }\n  | { type: 'clear' }\n  | { type: 'clearcancelled' }\n  | { type: 'cleared' }\n\n/**\n * The NodeEditor class is the entry class. It is used to create and manage nodes and connections.\n * @typeParam Scheme - The scheme type\n * @priority 7\n * @group Primary\n */\nexport class NodeEditor<Scheme extends BaseSchemes> extends Scope<Root<Scheme>> {\n  private nodes: Scheme['Node'][] = []\n  private connections: Scheme['Connection'][] = []\n\n  constructor() {\n    super('NodeEditor')\n  }\n\n  /**\n   * Get a node by id\n   * @param id - The node id\n   * @returns The node or undefined\n   */\n  public getNode(id: Scheme['Node']['id']) {\n    return this.nodes.find(node => node.id === id)\n  }\n\n  /**\n   * Get all nodes\n   * @returns Copy of array with nodes\n   */\n  public getNodes() {\n    return this.nodes.slice()\n  }\n\n  /**\n   * Get all connections\n   * @returns Copy of array with onnections\n   */\n  public getConnections() {\n    return this.connections.slice()\n  }\n\n  /**\n   * Get a connection by id\n   * @param id - The connection id\n   * @returns The connection or undefined\n   */\n  public getConnection(id: Scheme['Connection']['id']) {\n    return this.connections.find(connection => connection.id === id)\n  }\n\n  /**\n   * Add a node\n   * @param data - The node data\n   * @returns Whether the node was added\n   * @throws If the node has already been added\n   * @emits nodecreate\n   * @emits nodecreated\n   */\n  async addNode(data: Scheme['Node']) {\n    if (this.getNode(data.id)) throw new Error('node has already been added')\n\n    if (!await this.emit({ type: 'nodecreate', data })) return false\n\n    this.nodes.push(data)\n\n    await this.emit({ type: 'nodecreated', data })\n    return true\n  }\n\n  /**\n   * Add a connection\n   * @param data - The connection data\n   * @returns Whether the connection was added\n   * @throws If the connection has already been added\n   * @emits connectioncreate\n   * @emits connectioncreated\n   */\n  async addConnection(data: Scheme['Connection']) {\n    if (this.getConnection(data.id)) throw new Error('connection has already been added')\n\n    if (!await this.emit({ type: 'connectioncreate', data })) return false\n\n    this.connections.push(data)\n\n    await this.emit({ type: 'connectioncreated', data })\n    return true\n  }\n\n  /**\n   * Remove a node\n   * @param id - The node id\n   * @returns Whether the node was removed\n   * @throws If the node cannot be found\n   * @emits noderemove\n   * @emits noderemoved\n   */\n  async removeNode(id: Scheme['Node']['id']) {\n    const index = this.nodes.findIndex(n => n.id === id)\n    const node = this.nodes[index]\n\n    if (index < 0) throw new Error('cannot find node')\n\n    if (!await this.emit({ type: 'noderemove', data: node })) return false\n\n    this.nodes.splice(index, 1)\n\n    await this.emit({ type: 'noderemoved', data: node })\n    return true\n  }\n\n  /**\n   * Remove a connection\n   * @param id - The connection id\n   * @returns Whether the connection was removed\n   * @throws If the connection cannot be found\n   * @emits connectionremove\n   * @emits connectionremoved\n   */\n  async removeConnection(id: Scheme['Connection']['id']) {\n    const index = this.connections.findIndex(n => n.id === id)\n    const connection = this.connections[index]\n\n    if (index < 0) throw new Error('cannot find connection')\n\n    if (!await this.emit({ type: 'connectionremove', data: connection })) return false\n\n    this.connections.splice(index, 1)\n\n    await this.emit({ type: 'connectionremoved', data: connection })\n    return true\n  }\n\n  /**\n   * Clear all nodes and connections\n   * @returns Whether the editor was cleared\n   * @emits clear\n   * @emits clearcancelled\n   * @emits cleared\n   */\n  async clear() {\n    if (!await this.emit({ type: 'clear' })) {\n      await this.emit({ type: 'clearcancelled' })\n      return false\n    }\n\n    for (const connection of this.connections.slice()) await this.removeConnection(connection.id)\n    for (const node of this.nodes.slice()) await this.removeNode(node.id)\n\n    await this.emit({ type: 'cleared' })\n    return true\n  }\n}\n","/* global globalThis*/\n\nconst nodeCrypto = () => import('node:crypto')\n\nconst crypto = globalThis.crypto as (typeof globalThis.crypto | Awaited<ReturnType<typeof nodeCrypto>>)\n\n/**\n * @returns A unique id\n */\nexport function getUID(): string {\n  if ('randomBytes' in crypto) {\n    return crypto.randomBytes(8).toString('hex')\n  }\n\n  const bytes = crypto.getRandomValues(new Uint8Array(8))\n  const array = Array.from(bytes)\n  const hexPairs = array.map(b => b.toString(16).padStart(2, '0'))\n\n  return hexPairs.join('')\n}\n","/**\n * Contains classes for classic scheme such as Node, Input, Output, Control, Socket, Connection\n * @module\n * @group Primary\n */\n\nimport { ConnectionBase, NodeBase } from '../types'\nimport { getUID } from '../utils'\n\ntype PortId = string\n\n/**\n * The socket class\n * @priority 7\n */\nexport class Socket {\n  /**\n   * @constructor\n   * @param name Name of the socket\n   */\n  constructor(public name: string) {\n\n  }\n}\n\n/**\n * General port class\n */\nexport class Port<S extends Socket> {\n  /**\n   * Port id, unique string generated by `getUID` function\n   */\n  id: PortId\n  /**\n   * Port index, used for sorting ports. Default is `0`\n   */\n  index?: number\n\n  /**\n   * @constructor\n   * @param socket Socket instance\n   * @param label Label of the port\n   * @param multipleConnections Whether the output port can have multiple connections\n   */\n  constructor(public socket: S, public label?: string, public multipleConnections?: boolean) {\n    this.id = getUID()\n  }\n}\n\n/**\n * The input port class\n * @priority 6\n */\nexport class Input<S extends Socket> extends Port<S> {\n  /**\n   * Control instance\n   */\n  control: Control | null = null\n  /**\n   * Whether the control is visible. Can be managed dynamically by extensions. Default is `true`\n   */\n  showControl = true\n\n  /**\n   * @constructor\n   * @param socket Socket instance\n   * @param label Label of the input port\n   * @param multipleConnections Whether the output port can have multiple connections. Default is `false`\n   */\n  constructor(public socket: S, public label?: string, public multipleConnections?: boolean) {\n    super(socket, label, multipleConnections)\n  }\n\n  /**\n   * Add control to the input port\n   * @param control Control instance\n   */\n  addControl(control: Control) {\n    if (this.control) throw new Error('control already added for this input')\n    this.control = control\n  }\n\n  /**\n   * Remove control from the input port\n   */\n  removeControl() {\n    this.control = null\n  }\n}\n\n/**\n * The output port class\n * @priority 5\n */\nexport class Output<S extends Socket> extends Port<S> {\n  /**\n   * @constructor\n   * @param socket Socket instance\n   * @param label Label of the output port\n   * @param multipleConnections Whether the output port can have multiple connections. Default is `true`\n   */\n  constructor(socket: S, label?: string, multipleConnections?: boolean) {\n    super(socket, label, multipleConnections !== false)\n  }\n}\n\n/**\n * General control class\n * @priority 5\n */\nexport class Control {\n  /**\n   * Control id, unique string generated by `getUID` function\n   */\n  id: string\n  /**\n   * Control index, used for sorting controls. Default is `0`\n   */\n  index?: number\n\n  constructor() {\n    this.id = getUID()\n  }\n}\n\n/**\n * Input control options\n */\ntype InputControlOptions<N> = {\n  /** Whether the control is readonly. Default is `false` */\n  readonly?: boolean,\n  /** Initial value of the control */\n  initial?: N,\n  /** Callback function that is called when the control value changes */\n  change?: (value: N) => void\n}\n/**\n * The input control class\n * @example new InputControl('text', { readonly: true, initial: 'hello' })\n */\nexport class InputControl<T extends 'text' | 'number', N = T extends 'text' ? string : number> extends Control {\n  value?: N\n  readonly: boolean\n\n  /**\n   * @constructor\n   * @param type Type of the control: `text` or `number`\n   * @param options Control options\n   */\n  constructor(public type: T, public options?: InputControlOptions<N>) {\n    super()\n    this.id = getUID()\n    this.readonly = options?.readonly\n\n    if (typeof options?.initial !== 'undefined') this.value = options.initial\n  }\n\n  /**\n   * Set control value\n   * @param value Value to set\n   */\n  setValue(value?: N) {\n    this.value = value\n    if (this.options?.change) this.options.change(value)\n  }\n}\n\n/**\n * The node class\n * @priority 10\n * @example new Node('math')\n */\nexport class Node<\n  Inputs extends { [key in string]?: Socket } = { [key in string]?: Socket },\n  Outputs extends { [key in string]?: Socket } = { [key in string]?: Socket },\n  Controls extends { [key in string]?: Control } = { [key in string]?: Control }\n> implements NodeBase {\n  /**\n   * Node id, unique string generated by `getUID` function\n   */\n  id: NodeBase['id']\n  /**\n   * Node inputs\n   */\n  inputs: { [key in keyof Inputs]?: Input<Exclude<Inputs[key], undefined>> } = {}\n  /**\n   * Node outputs\n   */\n  outputs: { [key in keyof Outputs]?: Output<Exclude<Outputs[key], undefined>> } = {}\n  /**\n   * Node controls\n   */\n  controls: Controls = {} as Controls\n  /**\n   * Whether the node is selected. Default is `false`\n   */\n  selected?: boolean\n\n  constructor(public label: string) {\n    this.id = getUID()\n  }\n\n  hasInput<K extends keyof Inputs>(key: K) {\n    return Object.prototype.hasOwnProperty.call(this.inputs, key)\n  }\n\n  addInput<K extends keyof Inputs>(key: K, input: Input<Exclude<Inputs[K], undefined>>) {\n    if (this.hasInput(key)) throw new Error(`input with key '${String(key)}' already added`)\n\n    Object.defineProperty(this.inputs, key, { value: input, enumerable: true, configurable: true })\n  }\n\n  removeInput(key: keyof Inputs) {\n    delete this.inputs[key]\n  }\n\n  hasOutput<K extends keyof Outputs>(key: K) {\n    return Object.prototype.hasOwnProperty.call(this.outputs, key)\n  }\n\n  addOutput<K extends keyof Outputs>(key: K, output: Output<Exclude<Outputs[K], undefined>>) {\n    if (this.hasOutput(key)) throw new Error(`output with key '${String(key)}' already added`)\n\n    Object.defineProperty(this.outputs, key, { value: output, enumerable: true, configurable: true })\n  }\n\n  removeOutput(key: keyof Outputs) {\n    delete this.outputs[key]\n  }\n\n  hasControl<K extends keyof Controls>(key: K) {\n    return Object.prototype.hasOwnProperty.call(this.controls, key)\n  }\n\n  addControl<K extends keyof Controls>(key: K, control: Controls[K]) {\n    if (this.hasControl(key)) throw new Error(`control with key '${String(key)}' already added`)\n\n    Object.defineProperty(this.controls, key, { value: control, enumerable: true, configurable: true })\n  }\n\n  removeControl(key: keyof Controls) {\n    delete this.controls[key]\n  }\n}\n\n/**\n * The connection class\n * @priority 9\n */\nexport class Connection<\n  Source extends Node,\n  Target extends Node\n> implements ConnectionBase {\n  /**\n   * Connection id, unique string generated by `getUID` function\n   */\n  id: ConnectionBase['id']\n  /**\n   * Source node id\n   */\n  source: NodeBase['id']\n  /**\n   * Target node id\n   */\n  target: NodeBase['id']\n\n  /**\n   * @constructor\n   * @param source Source node instance\n   * @param sourceOutput Source node output key\n   * @param target Target node instance\n   * @param targetInput Target node input key\n   */\n  constructor(\n    source: Source,\n    public sourceOutput: keyof Source['outputs'],\n    target: Target,\n    public targetInput: keyof Target['inputs']\n  ) {\n    if (!source.outputs[sourceOutput as string]) {\n      throw new Error(`source node doesn't have output with a key ${String(sourceOutput)}`)\n    }\n    if (!target.inputs[targetInput as string]) {\n      throw new Error(`target node doesn't have input with a key ${String(targetInput)}`)\n    }\n\n    this.id = getUID()\n    this.source = source.id\n    this.target = target.id\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}